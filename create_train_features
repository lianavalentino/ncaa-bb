# create training dataset:
# create a row for the winning team
CREATE OR REPLACE TABLE `bracketology.training_features` AS
WITH GameMetrics AS (
  SELECT
    games.season,
    CASE
      WHEN teams.school_ncaa IS NOT NULL THEN teams.school_ncaa
      ELSE games.market
    END
    AS team, -- Use school_ncaa as the team
    games.game_id,
    (games.two_points_made + 0.5 * games.three_points_made) / games.field_goals_att AS eFGp,
    games.turnovers / (games.field_goals_att + 0.44 * games.free_throws_att + games.turnovers) AS TOVp,
    games.offensive_rebounds / (games.offensive_rebounds + games.opp_defensive_rebounds) AS ORBp,
    games.free_throws_made / games.field_goals_att AS FTr,
    (games.opp_two_points_made + 0.5 * games.opp_three_points_made) / games.opp_field_goals_att AS def_eFGp,
    games.opp_turnovers / (games.opp_field_goals_att + 0.44 * games.opp_free_throws_att + games.opp_turnovers) AS def_TOVp,
    games.opp_offensive_rebounds / (games.opp_offensive_rebounds + games.defensive_rebounds) AS def_ORBp,
    games.opp_free_throws_made / games.opp_field_goals_att AS def_FTr
  FROM
    `bigquery-public-data.ncaa_basketball.mbb_teams_games_sr` AS games
  LEFT JOIN
    `bigquery-public-data.ncaa_basketball.mbb_teams` AS teams
  ON
    games.market = teams.market -- Join on the market field
  WHERE
    games.division_alias = 'D1' -- Filter only for Division 1 games
    AND games.tournament != 'NCAA' AND games.minutes IS NOT NULL
),

TeamSeasonMetrics AS (
  SELECT
    season,
    team, -- Group by school_ncaa
    AVG(eFGp) AS eFGp,
    AVG(TOVp) AS TOVp,
    AVG(ORBp) AS ORBp,
    AVG(FTr) AS FTr,
    AVG(def_eFGp) AS def_eFGp,
    AVG(def_TOVp) AS def_TOVp,
    AVG(def_ORBp) AS def_ORBp,
    AVG(def_FTr) AS def_FTr
  FROM
    GameMetrics
  GROUP BY
    season, team
),
FourFactors as (
SELECT
  *
FROM
  TeamSeasonMetrics
ORDER BY
  season, team),
outcomes AS (
SELECT
  # features
  season, # 1994

  'win' AS label, # our label

  win_seed AS seed, # ranking # this time without seed even
  win_school_ncaa AS school_ncaa,

  lose_seed AS opponent_seed, # ranking
  lose_school_ncaa AS opponent_school_ncaa

FROM `bigquery-public-data.ncaa_basketball.mbb_historical_tournament_games` t
WHERE season >= 2014

UNION ALL

# create a separate row for the losing team
SELECT
# features
  season, # 1994

  'loss' AS label, # our label

  lose_seed AS seed, # ranking
  lose_school_ncaa AS school_ncaa,

  win_seed AS opponent_seed, # ranking
  win_school_ncaa AS opponent_school_ncaa

FROM
`bigquery-public-data.ncaa_basketball.mbb_historical_tournament_games` t
WHERE season >= 2014

-- UNION ALL

-- # add in 2018 tournament game results not part of the public dataset:
-- SELECT
--   season,
--   label,
--   seed,
--   school_ncaa,
--   opponent_seed,
--   opponent_school_ncaa
-- FROM
--   `data-to-insights.ncaa.2018_tournament_results`

)

SELECT
o.season,
label,

# our team
  seed,
  school_ncaa,
  # new pace metrics (basketball possession)
  team.pace_rank,
  team.poss_40min,
  team.pace_rating,
  # new efficiency metrics (scoring over time)
  team.efficiency_rank,
  team.pts_100poss,
  team.efficiency_rating,
  # four factors
  ff.eFGp,
  ff.TOVp,
  ff.ORBp,
  ff.FTR,
  ff.def_eFGp,
  ff.def_TOVp,
  ff.def_ORBp,
  ff.def_FTR,

# opposing team
  opponent_seed,
  opponent_school_ncaa,
  # new pace metrics (basketball possession)
  opp.pace_rank AS opp_pace_rank,
  opp.poss_40min AS opp_poss_40min,
  opp.pace_rating AS opp_pace_rating,
  # new efficiency metrics (scoring over time)
  opp.efficiency_rank AS opp_efficiency_rank,
  opp.pts_100poss AS opp_pts_100poss,
  opp.efficiency_rating AS opp_efficiency_rating,

# a little feature engineering (take the difference in stats)

  # new pace metrics (basketball possession)
  opp.pace_rank - team.pace_rank AS pace_rank_diff,
  opp.poss_40min - team.poss_40min AS pace_stat_diff,
  opp.pace_rating - team.pace_rating AS pace_rating_diff,
  # new efficiency metrics (scoring over time)
  opp.efficiency_rank - team.efficiency_rank AS eff_rank_diff,
  opp.pts_100poss - team.pts_100poss AS eff_stat_diff,
  opp.efficiency_rating - team.efficiency_rating AS eff_rating_diff,

  # four factors
  ff_opp.eFGp AS opp_eFGp,
  ff_opp.TOVp AS opp_TOVp,
  ff_opp.ORBp AS opp_ORBp,
  ff_opp.FTR AS opp_FTR,
  ff_opp.def_eFGp AS opp_def_eFGp,
  ff_opp.def_TOVp AS opp_def_TOVp,
  ff_opp.def_ORBp AS opp_def_ORBp,
  ff_opp.def_FTR AS opp_def_FTR


FROM outcomes AS o
LEFT JOIN `data-to-insights.ncaa.feature_engineering` AS team
ON o.school_ncaa = team.team AND o.season = team.season
LEFT JOIN FourFactors AS ff
ON o.school_ncaa = ff.team AND o.season = ff.season
LEFT JOIN `data-to-insights.ncaa.feature_engineering` AS opp
ON o.opponent_school_ncaa = opp.team AND o.season = opp.season
LEFT JOIN FourFactors AS ff_opp
ON o.opponent_school_ncaa = ff_opp.team AND o.season = ff_opp.season
